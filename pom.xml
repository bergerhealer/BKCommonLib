<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bergerkiller.bukkit</groupId>
    <artifactId>BKCommonLib</artifactId>
    <version>1.16.1-v1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>BKCommonLib</name>
    <url>https://github.com/bergerhealer/bkcommonlib/</url>

    <properties>
        <!-- Project build properties -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jdk.version>1.8</jdk.version>
        <project.buildNumber/>
        <project.finalNameBase>${project.name}-${project.version}</project.finalNameBase>
        <!-- Library versions -->
        <minecraft.version>1.16.1</minecraft.version>
        <minecraft.serverVersion>${minecraft.version}-R0.1-SNAPSHOT</minecraft.serverVersion>
        <mountiplex.version>1.88</mountiplex.version>
        <junit.version>4.12</junit.version>
    </properties>

    <profiles>
        <profile>
            <id>ci</id>
            <activation>
                <property>
                    <name>env.BUILD_NUMBER</name>
                </property>
            </activation>
            <properties>
                <project.buildNumber>${env.BUILD_NUMBER}</project.buildNumber>
            </properties>
        </profile>
    </profiles>

    <repositories>
        <!-- Repo for access to Spigot API -->
        <repository>
            <id>spigot-repo</id>
            <url>https://hub.spigotmc.org/nexus/content/groups/public/</url>
        </repository>

        <!-- Repo for the Mountiplex library -->
        <repository>
            <id>mg-repo</id>
            <url>https://ci.mg-dev.eu/plugin/repository/everything</url>
        </repository>

        <!-- Repository for Vault API -->
        <repository>
            <id>vault-repo</id>
            <url>http://nexus.hc.to/content/repositories/pub_releases</url>
        </repository>

        <!-- Repository for the ProtocolLib API -->
        <repository>
            <id>dmulloy2-repo</id>
            <url>http://repo.dmulloy2.net/nexus/repository/releases/</url>
        </repository>

        <!-- Repository for aikar's timings library -->
        <repository>
            <id>aikar</id>
            <url>https://repo.aikar.co/nexus/content/repositories/aikar-release/</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <!-- Repository for the Mountiplex maven plugin -->
        <pluginRepository>
            <id>mg-repo</id>
            <url>https://ci.mg-dev.eu/plugin/repository/everything</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencies>
        <!-- Server dependencies -->
        <!-- Spigot API includes the Bukkit API and is what plugins generally use -->
        <dependency>
            <groupId>org.spigotmc</groupId>
            <artifactId>spigot-api</artifactId>
            <version>${minecraft.serverVersion}</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>commons-lang</groupId>
                    <artifactId>commons-lang</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.googlecode.json-simple</groupId>
                    <artifactId>json-simple</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.google.code.gson</groupId>
                    <artifactId>gson</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>net.md-5</groupId>
                    <artifactId>bungeecord-chat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- We also depend on netty for the network logic, which is available in public repo -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>4.1.42.Final</version>
            <scope>provided</scope>
        </dependency>

        <!-- Included dependencies -->
        <!-- Reflection library-->
        <dependency>
            <groupId>com.bergerkiller.mountiplex</groupId>
            <artifactId>Mountiplex</artifactId>
            <version>${mountiplex.version}</version>
            <exclusions>
                <!-- Exclude dependencies of the maven plugin, this is a temp fix and needs to be corrected -->
                <exclusion>
                    <groupId>org.apache.maven</groupId>
                    <artifactId>maven-plugin-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Aikar's minecraft timings library, https://github.com/aikar/minecraft-timings -->
        <dependency>
            <groupId>co.aikar</groupId>
            <artifactId>minecraft-timings</artifactId>
            <version>1.0.4</version>
            <optional>true</optional>
            <exclusions>
                <exclusion>
                    <groupId>org.jetbrains</groupId>
                    <artifactId>annotations</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- GSON isn't available in spigot versions prior to 1.8, shade it in order to keep 1.7 compatibility -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.0</version>
            <optional>true</optional>
        </dependency>

        <!-- Log4j that is used inside the server -->
        <!-- https://mvnrepository.com/artifact/log4j/log4j -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.12.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.13.2</version>
            <scope>provided</scope>
        </dependency>

        <!-- Provided dependencies -->
        <!-- Vault hook -->
        <dependency>
            <groupId>net.milkbowl.vault</groupId>
            <artifactId>VaultAPI</artifactId>
            <version>1.7</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.bukkit</groupId>
                    <artifactId>bukkit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- ProtocolLib hook -->
        <dependency>
            <groupId>com.comphenix.protocol</groupId>
            <artifactId>ProtocolLib-API</artifactId>
            <version>4.4.0</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>cglib</groupId>
                    <artifactId>cglib-nodep</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.comphenix.executors</groupId>
                    <artifactId>BukkitExecutors</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Test dependencies -->
        <!-- The full server jar is only used during test; it should not be exposed as a dependency -->
        <dependency>
            <groupId>org.spigotmc</groupId>
            <artifactId>spigot</artifactId>
            <version>${minecraft.serverVersion}</version>
            <scope>test</scope>
        </dependency>
        <!-- Test engine -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Mock object library -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>2.22.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!-- Build -->
    <build>
        <!-- Little hack to prevent maven from uploading the shaded jar as main artifact, while keeping the original jar name -->
        <finalName>${project.finalNameBase}-noshade</finalName>
        <defaultGoal>clean package</defaultGoal>

        <!-- Resources (the filtering allows us to use project properties in plugin.yml) -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>plugin.yml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>plugin.yml</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/templates</directory>
            </resource>
        </resources>

        <!-- Plugins -->
        <plugins>
            <!-- Enforce build environment -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.4.1</version>
                <executions>
                    <execution>
                        <id>enforce-environment</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.3.3</version>
                                </requireMavenVersion>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Clean the target folder content -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.1.0</version>
            </plugin>
            <!-- Include resource files -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
            </plugin>
            <!-- Turns the reflection template files into Java source code -->
            <plugin>
                <groupId>com.bergerkiller.mountiplex</groupId>
                <artifactId>Mountiplex</artifactId>
                <version>${mountiplex.version}</version>
                <configuration>
                    <source_root>src/main/templates</source_root>
                    <target_root>src/main/java</target_root>
                    <generatorActions>
                        <generatorAction>
                            <source>com/bergerkiller/templates/init.txt</source>
                            <target>com/bergerkiller/generated</target>
                            <variables>
                                <version>${minecraft.version}</version>
                            </variables>
                        </generatorAction>
                    </generatorActions>
                </configuration>
                <executions>
                    <execution>
                        <id>Generate reflection templates</id>
                        <goals>
                            <goal>create-reflection</goal>
                        </goals>
                        <phase>generate-sources</phase>
                    </execution>
                </executions>
            </plugin>
            <!-- Compile and include classes -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                </configuration>
            </plugin>
            <!-- Surefire plugin for running the PostTestHandler after running all the tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <trimStackTrace>false</trimStackTrace>
                    <properties>
                        <property>
                            <name>listener</name>
                            <value>com.bergerkiller.bukkit.common.PostTestHandler</value>
                        </property>
                    </properties>
                </configuration>
            </plugin>
            <!-- Generate a jar containing classes and resources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.0</version>
            </plugin>
            <!-- Generate a jar containing the source javadoc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <finalName>${project.finalNameBase}</finalName>
                    <failOnError>false</failOnError>
                    <doclint>none</doclint>
                </configuration>
            </plugin>
            <!-- Generate a jar containing the java sources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <finalName>${project.finalNameBase}</finalName>
                </configuration>
            </plugin>
            <!-- Needed for shading in Mountiplex, CGLib and Objenesis -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <minimizeJar>true</minimizeJar>
                    <finalName>${project.finalNameBase}</finalName>
                    <shadedArtifactAttached>true</shadedArtifactAttached>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <relocations>
                        <relocation>
                            <pattern>co.aikar.timings.lib</pattern>
                            <shadedPattern>com.bergerkiller.bukkit.common.dep.timingslib</shadedPattern>
                        </relocation>
                        <relocation>
                            <pattern>com.google.gson</pattern>
                            <shadedPattern>com.bergerkiller.bukkit.common.dep.gson</shadedPattern>
                        </relocation>
                        <relocation>
                            <pattern>net.sf.cglib</pattern>
                            <shadedPattern>com.bergerkiller.mountiplex.dep.net.sf.cglib</shadedPattern>
                        </relocation>
                        <relocation>
                            <pattern>org.objectweb.asm</pattern>
                            <shadedPattern>com.bergerkiller.mountiplex.dep.org.objectweb.asm</shadedPattern>
                        </relocation>
                        <relocation>
                            <pattern>org.objenesis</pattern>
                            <shadedPattern>com.bergerkiller.mountiplex.dep.org.objenesis</shadedPattern>
                        </relocation>
                        <relocation>
                            <pattern>javassist</pattern>
                            <shadedPattern>com.bergerkiller.mountiplex.dep.javassist</shadedPattern>
                        </relocation>
                    </relocations>
                    <artifactSet>
                        <includes>
                            <include>org.ow2.asm</include>
                            <include>cglib</include>
                            <include>org.objenesis</include>
                            <include>org.javassist</include>
                            <include>com.bergerkiller.mountiplex</include>
                            <include>com.google.code.gson</include>
                            <include>co.aikar</include>
                        </includes>
                    </artifactSet>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Copy the produced target to the static directory with just a base name -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <!-- Prepare the version-less output jar -->
                    <execution>
                        <id>version-less-jar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <copy file="target/${project.finalNameBase}.jar" tofile="target/static/${project.name}.jar"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Install the jars as artifacts into the local repository -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>2.5.2</version>
            </plugin>
            <!-- Deploy the jars as artifacts into the remote repository -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
            </plugin>
        </plugins>

        <!-- This section here is purely to stop lifecycle errors from happening in Eclipse IDE -->
        <pluginManagement>
            <plugins>
                <!-- This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>com.bergerkiller.mountiplex</groupId>
                                        <artifactId>Mountiplex</artifactId>
                                        <versionRange>[1.0,)</versionRange>
                                        <goals>
                                            <goal>create-reflection</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore/>
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-antrun-plugin</artifactId>
                                        <versionRange>[1.8,)</versionRange>
                                        <goals>
                                            <goal>run</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore/>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>

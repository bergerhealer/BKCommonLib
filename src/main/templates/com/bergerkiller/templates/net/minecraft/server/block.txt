package net.minecraft.server;

import com.google.common.collect.ImmutableMap;
import com.google.common.base.Function;

import com.bergerkiller.bukkit.common.wrappers.BlockData;
import com.bergerkiller.bukkit.common.bases.IntVector3

import com.bergerkiller.generated.net.minecraft.server.AxisAlignedBBHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.BlockHandle;
import com.bergerkiller.generated.net.minecraft.server.IBlockAccessHandle
import com.bergerkiller.generated.net.minecraft.server.IBlockDataHandle;
import com.bergerkiller.generated.net.minecraft.server.IBlockStateHandle;
import com.bergerkiller.generated.net.minecraft.server.ExplosionHandle;
import com.bergerkiller.generated.net.minecraft.server.SoundEffectTypeHandle;

class Block {

    public static final Iterable<?> getRegistry() {
#if version >= 1.13.1
        return IRegistry.BLOCK;
#else
        return Block.REGISTRY;
#endif
    }

#if version >= 1.9
    public static final rawtype (Iterable) RegistryBlockID<IBlockData> REGISTRY_ID;
    public optional (SoundEffectTypeHandle) Block.StepSound opt_1_8_8_soundType:###;
#else
    public static final rawtype (Iterable) RegistryID<IBlockData> REGISTRY_ID:d;
    public optional (SoundEffectTypeHandle) Block.StepSound opt_1_8_8_soundType:stepSound;
#endif

#if version >= 1.13
    public void entityHitVertical:a((WorldHandle) IBlockAccess world, (EntityHandle) Entity entity);
#else
    public void entityHitVertical:a((WorldHandle) World world, (EntityHandle) Entity entity);
#endif

#if version >= 1.13
    // Since 1.13 getOpacity has a BlockPosition argument
    public int getOpacity((IBlockDataHandle) IBlockData iblockdata, (org.bukkit.World) World world, int x, int y, int z) {
        return iblockdata.b(world, new BlockPosition(x, y, z));
    }

    #if pre <= 7
        public int getEmission:l((IBlockDataHandle) IBlockData iblockdata);
    #else
        public int getEmission:m((IBlockDataHandle) IBlockData iblockdata);
    #endif

    public boolean isOccluding:isOccluding((IBlockDataHandle) IBlockData iblockdata);
    public boolean isPowerSource:isPowerSource((IBlockDataHandle) IBlockData iblockdata);
#elseif version >= 1.9
    // On later versions, it has an IBlockData argument
    public int getOpacity((IBlockDataHandle) IBlockData iblockdata, (org.bukkit.World) World world, int x, int y, int z) {
        return instance.m(iblockdata);
    }
    public int getEmission:o((IBlockDataHandle) IBlockData iblockdata);
    public boolean isOccluding:isOccluding((IBlockDataHandle) IBlockData iblockdata);
    public boolean isPowerSource:isPowerSource((IBlockDataHandle) IBlockData iblockdata);
#elseif version >= 1.8.3
    // By IBlockData does not exist; proxy to the empty args version
    public int getOpacity((IBlockDataHandle) IBlockData iblockdata, (org.bukkit.World) World world, int x, int y, int z) {
        return instance.p();
    }
    public int getEmission((IBlockDataHandle) IBlockData iblockdata) {
        return instance.r();
    }
    public boolean isOccluding((IBlockDataHandle) IBlockData iblockdata) {
        return instance.isOccluding();
    }
    public boolean isPowerSource((IBlockDataHandle) IBlockData iblockdata) {
        return instance.isPowerSource();
    }
#else
    // By IBlockData does not exist; proxy to the empty args version
    public int getOpacity((IBlockDataHandle) IBlockData iblockdata, (org.bukkit.World) World world, int x, int y, int z) {
        return instance.n();
    }
    public int getEmission((IBlockDataHandle) IBlockData iblockdata) {
        return instance.p();
    }
    public boolean isOccluding((IBlockDataHandle) IBlockData iblockdata) {
        return instance.isOccluding();
    }
    public boolean isPowerSource((IBlockDataHandle) IBlockData iblockdata) {
        return instance.isPowerSource();
    }
#endif

#if version >= 1.13.1
    public float getDamageResillience:getDurability();
#elseif version >= 1.13
    #if pre <= 7
        public float getDamageResillience:j();
    #else
        public float getDamageResillience:k();
    #endif
#else
    public float getDamageResillience() {
        return instance.a((net.minecraft.server.Entity) null);
    }
#endif

#if version >= 1.11
    public optional (SoundEffectTypeHandle) SoundEffectType getSoundType:getStepSound();
#elseif version >= 1.9
    public optional (SoundEffectTypeHandle) SoundEffectType getSoundType:w();
#else
    public optional (SoundEffectTypeHandle) SoundEffectType getSoundType:###();
#endif
    <code>
    public SoundEffectTypeHandle getSoundType() {
        if (T.getSoundType.isAvailable()) {
            return T.getSoundType.invoke(getRaw());
        } else {
            return T.opt_1_8_8_soundType.get(getRaw());
        }
    }
    </code>

#if version >= 1.13
    public void dropNaturally((IBlockDataHandle) IBlockData iblockdata, (org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, float yield, int chance);
#else

    // In 1.13 they changed parameter order for some stupid reason. Just proxy it.
    // public void dropNaturally((org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, (IBlockDataHandle) IBlockData iblockdata, float yield, int chance);
    public void dropNaturally((IBlockDataHandle) IBlockData iblockdata, (org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, float yield, int chance) {
        instance.dropNaturally(world, blockposition, iblockdata, yield, chance);
    }
#endif

    public void ignite:wasExploded((org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, (ExplosionHandle) Explosion explosion);

#if version >= 1.9
    public void stepOn((org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, (org.bukkit.entity.Entity) Entity entity);
#else
    public void stepOn:a((org.bukkit.World) World world, (IntVector3) BlockPosition blockposition, (org.bukkit.entity.Entity) Entity entity);
#endif

    public (IBlockDataHandle) IBlockData updateState((IBlockDataHandle) IBlockData iblockdata, (org.bukkit.World) World world, (IntVector3) BlockPosition blockposition) {
#if version >= 1.13
        return Block.b(iblockdata, world, blockposition);
#else
        return instance.updateState(iblockdata, world, blockposition);
#endif
    }

#if version >= 1.13
    public (AxisAlignedBBHandle) AxisAlignedBB getBoundingBox((IBlockDataHandle) IBlockData iblockdata, (IBlockAccessHandle) IBlockAccess iblockaccess, (IntVector3) BlockPosition blockposition) {
        VoxelShape shape = instance.a(iblockdata, iblockaccess, blockposition);
        if (shape.b()) {
            return null;
        } else {
            return shape.a();
        }
    }
#elseif version >= 1.9
    public (AxisAlignedBBHandle) AxisAlignedBB getBoundingBox:a((IBlockDataHandle) IBlockData iblockdata, (IBlockAccessHandle) IBlockAccess iblockaccess, (IntVector3) BlockPosition blockposition);
#else
    public (AxisAlignedBBHandle) AxisAlignedBB getBoundingBox((IBlockDataHandle) IBlockData iblockdata, (IBlockAccessHandle) IBlockAccess iblockaccess, (IntVector3) BlockPosition blockposition) {
        instance.updateShape(iblockaccess, blockposition);
        AxisAlignedBB bounds_abs = instance.a((World) iblockaccess, blockposition, iblockdata);
        if (bounds_abs == null) {
            return null;
        } else {
            // c() = add(x,y,z)  ->  make block-relative coordinates
            return bounds_abs.c((double) -blockposition.getX(), (double) -blockposition.getY(), (double) -blockposition.getZ());
        }
    }
#endif

    public final (IBlockDataHandle) IBlockData getBlockData();

    public static (IBlockDataHandle) IBlockData getByCombinedId(int combinedId);
    public static int getCombinedId((IBlockDataHandle) IBlockData iblockdata);
}

class Blocks {
    public static final (Object) Block LADDER;
}

interface IBlockData {
    public abstract (BlockHandle) Block getBlock();

    <code>
    public void logStates() {
        for (java.util.Map.Entry<IBlockStateHandle, Comparable<?>> entry : getStates().entrySet()) {
            System.out.println(entry.getKey() + " = " + entry.getValue());
        }
    }

    public IBlockStateHandle findState(String key) {
        for (IBlockStateHandle blockState : getStates().keySet()) {
            if (blockState.getKeyToken().equals(key)) {
                return blockState;
            }
        }
        return null;
    }

    public IBlockDataHandle set(String key, Object value) {
        return set(findState(key), value);
    }

    public <T> T get(String key, Class<T> type) {
        return get(findState(key), type);
    }

    public <T> T get(IBlockStateHandle state, Class<T> type) {
        return com.bergerkiller.bukkit.common.conversion.Conversion.convert(get(state), type, null);
    }
    </code>

    public Object get((IBlockStateHandle) IBlockState state) {
        if (state != null) {
            return instance.get(state);
        } else {
            return null;
        }
    }

    public (IBlockDataHandle) IBlockData set((IBlockStateHandle) IBlockState state, Object value) {
        if (state != null) {
            Object converted = com.bergerkiller.bukkit.common.conversion.Conversion.convert(value, state.b(), null);
            if (converted != null) {
                return (IBlockData) instance.set(state, (Comparable) converted);
            }
        }
        return instance;
    }

#if version >= 1.13
    public abstract (Map<IBlockStateHandle, Comparable<?>>) ImmutableMap<IBlockState<?>, Comparable<?>> getStates:b();
#elseif version >= 1.12
    public abstract (Map<IBlockStateHandle, Comparable<?>>) ImmutableMap<IBlockState<?>, Comparable<?>> getStates:t();
#elseif version >= 1.11
    public abstract (Map<IBlockStateHandle, Comparable<?>>) ImmutableMap<IBlockState<?>, Comparable<?>> getStates:u();
#elseif version >= 1.9
    public abstract (Map<IBlockStateHandle, Comparable<?>>) ImmutableMap<IBlockState<?>, Comparable<?>> getStates:s();
#else
    public abstract (Map<IBlockStateHandle, Comparable<?>>) ImmutableMap<IBlockState, Comparable> getStates:b();
#endif
}

interface IBlockState {
    public abstract String getKeyToken:a();

#if version >= 1.8.3
    public abstract String getValueToken:a((Comparable) T value);
#else
    public abstract String getValueToken:a((Comparable) Comparable value);
#endif
}
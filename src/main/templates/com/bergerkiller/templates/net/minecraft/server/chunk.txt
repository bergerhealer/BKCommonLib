package net.minecraft.server;

/* import com.bergerkiller.generated.net.minecraft.server.EntityHandle; */

import com.bergerkiller.bukkit.common.wrappers.BlockData;
import com.bergerkiller.bukkit.common.bases.IntVector3;

import com.bergerkiller.generated.net.minecraft.server.WorldHandle;
import com.bergerkiller.generated.net.minecraft.server.ChunkSectionHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.EnumSkyBlockHandle;
import com.bergerkiller.generated.net.minecraft.server.DataPaletteBlockHandle;
import com.bergerkiller.generated.net.minecraft.server.NibbleArrayHandle;
import com.bergerkiller.generated.net.minecraft.server.EntitySliceHandle;

class Chunk {
    private final (ChunkSectionHandle[]) ChunkSection[] sections;
    public final (WorldHandle) World world;
    public final int locX;
    public final int locZ;
    public final (Map<IntVector3, org.bukkit.block.BlockState>) Map<BlockPosition, TileEntity> tileEntities;
#if spigot
    public final (List<Object>[]) List<Entity>[] entitySlices;
#else
    public final (List<Object>[]) EntitySlice<Entity>[] entitySlices;
#endif
    public org.bukkit.Chunk bukkitChunk;

#if version >= 1.13
    public (BlockData) IBlockData getBlockData:getType((IntVector3) BlockPosition blockposition);
#else
    public (BlockData) IBlockData getBlockData((IntVector3) BlockPosition blockposition);
#endif

#if version >= 1.13
    public (BlockData) IBlockData getBlockDataAtCoord:getBlockData(int x, int y, int z);
#elseif version >= 1.9
    public (BlockData) IBlockData getBlockDataAtCoord:a(int x, int y, int z);
#else
    // Fallback on 1.8.8: generated code
    public (BlockData) IBlockData getBlockDataAtCoord(int x, int y, int z) {
        return instance.getBlockData(new BlockPosition(x, y, z));
    }
#endif

    // Since MC 1.13 updateFlags are used (See World.java setTypeAndData)
    public (BlockData) IBlockData setBlockData((IntVector3) BlockPosition blockposition, (BlockData) IBlockData iblockdata, int updateFlags) {
#if version >= 1.13
        return instance.a(blockposition, iblockdata, (updateFlags & 64) != 0);
#else
        return instance.a(blockposition, iblockdata);
#endif
    }

    public void addEntity:a((EntityHandle) Entity entity);

#if version >= 1.13
    public (com.bergerkiller.bukkit.common.wrappers.HeightMap) HeightMap getHeightMap:b((com.bergerkiller.bukkit.common.wrappers.HeightMap.Type) HeightMap.Type type);

    public int getHeight:a((com.bergerkiller.bukkit.common.wrappers.HeightMap.Type) HeightMap.Type type, int x, int z);
#else
    public (com.bergerkiller.bukkit.common.wrappers.HeightMap) HeightMap getHeightMap(com.bergerkiller.bukkit.common.wrappers.HeightMap.Type type) {
        return new com.bergerkiller.bukkit.common.internal.proxy.HeightMapProxy_1_12_2(instance, instance.heightMap);
    }

    public int getHeight((com.bergerkiller.bukkit.common.wrappers.HeightMap.Type) HeightMap.Type type, int x, int z) {
        return instance.b(x, z);
    }
#endif

    public int getBrightness((EnumSkyBlockHandle) EnumSkyBlock enumskyblock, (IntVector3) BlockPosition position);

#if version >= 1.13
    public int getTopSliceY:b();
#else
    public int getTopSliceY:g();
#endif

    // MC 1.13: byte[] -> BiomeBase[]
    // public byte[] getBiomeIndex();

    public void addEntities();

#if version >= 1.13
    public boolean checkCanSave:c(boolean isNotAutosave);
#else
    public boolean checkCanSave:a(boolean isNotAutosave);
#endif

#if version >= 1.12
    public void markDirty();
#else
    public void markDirty:e();
#endif

    <code>
    public static ChunkHandle fromBukkit(org.bukkit.Chunk chunk) {
        if (chunk != null) {
            return createHandle(com.bergerkiller.bukkit.common.conversion.type.HandleConversion.toChunkHandle(chunk));
        } else {
            return null;
        }
    }
    </code>
}

class ChunkSection {
    private (NibbleArrayHandle) NibbleArray blockLight:emittedLight;
    private (NibbleArrayHandle) NibbleArray skyLight;

    public boolean isEmpty:a();

    public int getYPosition();

    public (ChunkSectionHandle) ChunkSection(int y, boolean hasSkyLight);

    public (NibbleArrayHandle) NibbleArray getBlockLightArray:getEmittedLightArray();
    public (NibbleArrayHandle) NibbleArray getSkyLightArray:getSkyLightArray();

#if version >= 1.13
    public (DataPaletteBlockHandle) DataPaletteBlock<IBlockData> getBlockPalette:getBlocks();
#elseif version >= 1.9
    public (DataPaletteBlockHandle) DataPaletteBlock getBlockPalette:getBlocks();
#else
    // For MC 1.8.8 we do some conversion magic to expose the same API
    // DataPaletteBlock doesn't actually exist, it is emulated by BKCommonLib
    public (DataPaletteBlockHandle) char[] getBlockPalette:getIdArray();
#endif

    public (BlockData) IBlockData getBlockData:getType(int x, int y, int z);
    public void setBlockData:setType(int x, int y, int z, (BlockData) IBlockData data);

    public void setSkyLight:a(int x, int y, int z, int level);
    public void setBlockLight:b(int x, int y, int z, int level);

#if version >= 1.13
    public int getSkyLight:c(int x, int y, int z);
    public int getBlockLight:d(int x, int y, int z);
#elseif version >= 1.9
    public int getSkyLight:b(int x, int y, int z);
    public int getBlockLight:c(int x, int y, int z);
#else
    public int getSkyLight:d(int x, int y, int z);
    public int getBlockLight:e(int x, int y, int z);
#endif

}

// This is only used on CraftBukkit servers
// Spigot uses a simplified List<Entity>
optional class EntitySlice {
#if version >= 1.8.3
    private optional final List<T> listValues_1_8_3:e;
#else
    private optional final List<T> listValues_1_8_3:###;
#endif

    public (EntitySliceHandle) EntitySlice((Class<?>) Class<T> oclass);

    public boolean add(T value);

    public boolean remove(Object value);

    public Iterator iterator();

    public int size();
}

class DataPaletteBlock {
#if version >= 1.13
    public (BlockData) IBlockData getBlockData(int x, int y, int z) {
        return (IBlockData) instance.a(x, y, z);
    }
    public void setBlockData(int x, int y, int z, (BlockData) IBlockData data) {
        instance.setBlock(x, y, z, data);
    }
#elseif version >= 1.9
    public (BlockData) IBlockData getBlockData:a(int x, int y, int z);
    public void setBlockData:setBlock(int x, int y, int z, (BlockData) IBlockData data);
#else
    // Emulated on MC 1.8.8
    public (BlockData) BlockData getBlockData(int x, int y, int z);
    public void setBlockData(int x, int y, int z, (BlockData) BlockData data);
#endif
}

class EnumSkyBlock {
    enum (EnumSkyBlockHandle) EnumSkyBlock SKY;
    enum (EnumSkyBlockHandle) EnumSkyBlock BLOCK;

    public final int brightness:c;

    <code>
    public int ordinal() {
        return ((Enum<?>) getRaw()).ordinal();
    }
    </code>
}

class HeightMap {

    public void initialize:a();

    public int getHeight:a(int x, int z);

}
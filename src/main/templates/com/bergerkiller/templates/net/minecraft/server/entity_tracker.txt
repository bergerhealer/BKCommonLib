package net.minecraft.server;

import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityTrackerEntryHandle;
import com.bergerkiller.bukkit.common.protocol.CommonPacket;

class EntityTracker {
    private final (org.bukkit.World) WorldServer world;
    private final (Set<EntityTrackerEntryHandle>) Set<EntityTrackerEntry> entries:c;
    public final (com.bergerkiller.bukkit.common.wrappers.IntHashMap<Object>) IntHashMap<EntityTrackerEntry> trackedEntities;
    private int viewDistance:e;

#if version >= 1.9
    public void sendPacketToEntity((org.bukkit.entity.Entity) Entity entity, (CommonPacket) Packet<?> packet);
#else
    public void sendPacketToEntity((org.bukkit.entity.Entity) Entity entity, (CommonPacket) Packet packet);
#endif

    public void trackEntity:track((org.bukkit.entity.Entity) Entity entity);
    public void untrackEntity((org.bukkit.entity.Entity) Entity entity);

    public void untrackPlayer((org.bukkit.entity.Player) EntityPlayer player);
    public void spawnEntities:a((org.bukkit.entity.Player) EntityPlayer entityplayer, (org.bukkit.Chunk) Chunk chunk);
}

class EntityTrackerEntry {
#if version >= 1.9
    private final (EntityHandle) Entity tracker;

    private final int viewDistance:e;
    private optional int playerViewDistance:f;
    private final int updateInterval:g;

    private optional long long_xLoc:xLoc;
    private optional long long_yLoc:yLoc;
    private optional long long_zLoc:zLoc;
    private optional int int_xLoc:###;
    private optional int int_yLoc:###;
    private optional int int_zLoc:###;

    public int raw_xRot:yRot;
    public int raw_yRot:xRot;
    public int raw_headYaw:headYaw;

    private double xVel:n;
    private double yVel:o;
    private double zVel:p;

    public int tickCounter:a;
#else
    public final (EntityHandle) Entity tracker;

    public int viewDistance:b;
    public optional int playerViewDistance:###;
    public int updateInterval:c;

    public optional long long_xLoc:###;
    public optional long long_yLoc:###;
    public optional long long_zLoc:###;
    public optional int int_xLoc:xLoc;
    public optional int int_yLoc:yLoc;
    public optional int int_zLoc:zLoc;

    public int raw_xRot:yRot;
    public int raw_yRot:xRot;
    public int raw_headYaw:i;

    public double xVel:j;
    public double yVel:k;
    public double zVel:l;

    public int tickCounter:m;
#endif

    // Constructors, with a helper method to choose the right one (difference between MC 1.8.8 and 1.9 onwards)
    // On MC 1.8.8, the playerViewDistance field is ignored.
    public optional (EntityTrackerEntryHandle) EntityTrackerEntry((org.bukkit.entity.Entity) Entity entity, int viewDistance, int playerViewDistance, int updateInterval, boolean isMobile);
    public optional (EntityTrackerEntryHandle) EntityTrackerEntry((org.bukkit.entity.Entity) Entity entity, int viewDistance, int updateInterval, boolean isMobile);
    <code>
    public static EntityTrackerEntryHandle createNew(org.bukkit.entity.Entity entity, int viewDistance, int playerViewDistance, int updateInterval, boolean isMobile) {
        if (T.constr_entity_viewDistance_playerViewDistance_updateInterval_isMobile.isAvailable()) {
            return T.constr_entity_viewDistance_playerViewDistance_updateInterval_isMobile.newInstance(
                entity, viewDistance, playerViewDistance, updateInterval, isMobile);
        } else {
            return T.constr_entity_viewDistance_updateInterval_isMobile.newInstance(
                entity, viewDistance, updateInterval, isMobile);
        }
    }
    </code>


    <code>
    // Minimal change of x/y/z position or rotation that is supported
    public static final double POSITION_STEP;
    public static final float ROTATION_STEP;
    public static final float ROTATION_STEP_INV;
    static {
        if (T.long_xLoc.isAvailable()) {
            POSITION_STEP = 1.0 / 4096.0;
        } else {
            POSITION_STEP = 1.0 / 32.0;
        }
        ROTATION_STEP = 360.0f / 256.0f;
        ROTATION_STEP_INV = 256.0f / 360.0f;
    }

    public static final boolean hasProtocolRotationChanged(float angle1, float angle2) {
        if (angle1 == angle2) {
            return false;
        }

        int prot_diff = com.bergerkiller.bukkit.common.utils.MathUtil.floor((angle2-angle1)*ROTATION_STEP_INV) & 0xFF;
        if (prot_diff > 0 && prot_diff < 255) {
            return true;
        }

        int prot1 = com.bergerkiller.bukkit.common.utils.MathUtil.floor(angle1*ROTATION_STEP_INV);
        int prot2 = com.bergerkiller.bukkit.common.utils.MathUtil.floor(angle2*ROTATION_STEP_INV);
        return ((prot1 - prot2) & 0xFF) != 0;
    }

    public static final int getProtocolRotation(float angle) {
        int protAngle = com.bergerkiller.bukkit.common.utils.MathUtil.floor(angle * ROTATION_STEP_INV) & 0xFF;
        if (protAngle >= 128) {
            protAngle -= 256;
        }
        return protAngle;
    }

    public static final float getRotationFromProtocol(int protocol) {
        int protAngle = protocol & 0xFF;
        if (protAngle >= 128) {
            protAngle -= 256;
        }
        return (float) protAngle * ROTATION_STEP;
    }

    // Performs protocol translation to set the synchronized x position coordinate
    public void setLocX(double x) {
        if (T.long_xLoc.isAvailable()) {
            T.long_xLoc.setLong(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.longFloor(x * 4096.0));
        } else {
            T.int_xLoc.setInteger(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.floor(x * 32.0));
        }
    }

    // Performs protocol translation to set the synchronized y position coordinate
    public void setLocY(double y) {
        if (T.long_yLoc.isAvailable()) {
            T.long_yLoc.setLong(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.longFloor(y * 4096.0));
        } else {
            T.int_yLoc.setInteger(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.floor(y * 32.0));
        }
    }

    // Performs protocol translation to set the synchronized z position coordinate
    public void setLocZ(double z) {
        if (T.long_zLoc.isAvailable()) {
            T.long_zLoc.setLong(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.longFloor(z * 4096.0));
        } else {
            T.int_zLoc.setInteger(getRaw(), com.bergerkiller.bukkit.common.utils.MathUtil.floor(z * 32.0));
        }
    }

    // Performs protocol translation to set the synchronized yaw rotation
    public void setYaw(float yaw) {
        T.raw_yRot.setInteger(getRaw(), getProtocolRotation(yaw));
    }

    // Performs protocol translation to set the synchronized pitch rotation
    public void setPitch(float pitch) {
        T.raw_xRot.setInteger(getRaw(), getProtocolRotation(pitch));
    }

    // Performs protocol translation to set the synchronized head rotation
    public void setHeadYaw(float headYaw) {
        T.raw_headYaw.setInteger(getRaw(), getProtocolRotation(headYaw));
    }

    // Performs protocol translation to get the synchronized x position coordinate
    public double getLocX() {
        if (T.long_xLoc.isAvailable()) {
            return (double) T.long_xLoc.getLong(getRaw()) / 4096.0;
        } else {
            return (double) T.int_xLoc.getInteger(getRaw()) / 32.0;
        }
    }

    // Performs protocol translation to get the synchronized y position coordinate
    public double getLocY() {
        if (T.long_yLoc.isAvailable()) {
            return (double) T.long_yLoc.getLong(getRaw()) / 4096.0;
        } else {
            return (double) T.int_yLoc.getInteger(getRaw()) / 32.0;
        }
    }

    // Performs protocol translation to get the synchronized z position coordinate
    public double getLocZ() {
        if (T.long_zLoc.isAvailable()) {
            return (double) T.long_zLoc.getLong(getRaw()) / 4096.0;
        } else {
            return (double) T.int_zLoc.getInteger(getRaw()) / 32.0;
        }
    }

    // Performs protocol translation to get the synchronized yaw rotation
    public float getYaw() {
        return getRotationFromProtocol(T.raw_yRot.getInteger(getRaw()));
    }

    // Performs protocol translation to get the synchronized pitch rotation
    public float getPitch() {
        return getRotationFromProtocol(T.raw_xRot.getInteger(getRaw()));
    }

    // Performs protocol translation to get the synchronized head rotation
    public float getHeadYaw() {
        return getRotationFromProtocol(T.raw_headYaw.getInteger(getRaw()));
    }
    </code>

    private double prevX:q;
    private double prevY:r;
    private double prevZ:s;

    private boolean synched:isMoving;
    private final boolean isMobile:u;
    private int timeSinceLocationSync:v;

#if version >= 1.9
    private optional (List<org.bukkit.entity.Entity>) List<Entity> opt_passengers:w;
    private optional (org.bukkit.entity.Entity) Entity opt_vehicle:###;
#else
    private optional (List<org.bukkit.entity.Entity>) List<Entity> opt_passengers:###;
    private optional (org.bukkit.entity.Entity) Entity opt_vehicle:w;
#endif

    // Note: on PaperSpigot trackedPlayers is a HashMap instead
    public optional (Map<org.bukkit.entity.Player, Boolean>) Map<EntityPlayer, Boolean> viewersMap:trackedPlayerMap;
    public optional final (Set<org.bukkit.entity.Player>) Set<EntityPlayer> viewersSet:trackedPlayers;

    public void hideForAll:a();

    public void removeViewer:a((org.bukkit.entity.Player) EntityPlayer player);

    public void scanPlayers((List<org.bukkit.entity.Player>) List<EntityHuman> playerList);
    public void updatePlayer((org.bukkit.entity.Player) EntityPlayer player);

#if version >= 1.9
    private (CommonPacket) Packet<?> getSpawnPacket:e();
#else
    private (CommonPacket) Packet getSpawnPacket:c();
#endif

    <code>
    public java.util.Collection<org.bukkit.entity.Player> getViewers() {
        if (T.viewersMap.isAvailable()) {
            return T.viewersMap.get(getRaw()).keySet();
        } else {
            return T.viewersSet.get(getRaw());
        }
    }

    public void clearViewers() {
        if (T.viewersMap.isAvailable()) {
            T.viewersMap.get(getRaw()).clear();
        } else {
            T.viewersSet.get(getRaw()).clear();
        }
    }

    public boolean addViewerToSet(org.bukkit.entity.Player viewer) {
        if (T.viewersMap.isAvailable()) {
            java.util.Map<org.bukkit.entity.Player, Boolean> map = T.viewersMap.get(getRaw());
            if (map.containsKey(viewer)) {
                return false;
            } else {
                map.put(viewer, true);
                return true;
            }
        } else {
            return T.viewersSet.get(getRaw()).add(viewer);
        }
    }

    public boolean removeViewerFromSet(org.bukkit.entity.Player viewer) {
        if (T.viewersMap.isAvailable()) {
            return T.viewersMap.get(getRaw()).remove(viewer) != null;
        } else {
            return T.viewersSet.get(getRaw()).remove(viewer);
        }
    }
    </code>
}
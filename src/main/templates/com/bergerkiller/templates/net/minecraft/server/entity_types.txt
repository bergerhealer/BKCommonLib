package net.minecraft.server;

import com.bergerkiller.generated.net.minecraft.server.RegistryMaterialsHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle;

class EntityTypes {
    // 1.10.2 and before used a Map<String, Class> and Map<Class, String> to store name to entity class information
#if version >= 1.11
    private static optional final (Map<String, Class<?>>) Map<String, Class<? extends Entity>> opt_nameTypeMap_1_10_2:###;
    private static optional final (Map<Class<?>, String>) Map<Class<? extends Entity>, String> opt_typeNameMap_1_10_2:###;
#else
    private static optional final (Map<String, Class<?>>) Map<String, Class<? extends Entity>> opt_nameTypeMap_1_10_2:c;
    private static optional final (Map<Class<?>, String>) Map<Class<? extends Entity>, String> opt_typeNameMap_1_10_2:d;
#endif

#if version >= 1.11
    private static optional final (Map<Class<?>, Integer>) Map<Class<? extends Entity>, Integer> opt_typeIdMap_1_8:###;
#elseif version >= 1.8.3
    private static optional final (Map<Class<?>, Integer>) Map<Class<? extends Entity>, Integer> opt_typeIdMap_1_8:f;
#else
    private static optional final (Map<Class<?>, Integer>) Map opt_typeIdMap_1_8:f;
#endif

#if version >= 1.13.1
    public static optional (RegistryMaterialsHandle) RegistryMaterials<MinecraftKey, EntityTypes<?>> opt_getRegistry() {
        return IRegistry.ENTITY_TYPE;
    }
#elseif version >= 1.13
    public static optional (RegistryMaterialsHandle) RegistryMaterials<MinecraftKey, EntityTypes<?>> opt_getRegistry() {
        return EntityTypes.REGISTRY;
    }
#elseif version >= 1.11
    public static optional (RegistryMaterialsHandle) RegistryMaterials<MinecraftKey, EntityTypes<?>> opt_getRegistry() {
        return EntityTypes.b;
    }
#else
    public static optional (RegistryMaterialsHandle) RegistryMaterials<MinecraftKey, EntityTypes<?>> opt_getRegistry:###();
#endif

#if version >= 1.13
    public optional (Class<?>) Class<? extends Entity> getEntityClassInst:c();

    public static optional (EntityTypesHandle) EntityTypes fromEntityClass(Class<?> entityType) {
#if version >= 1.13.1
        java.util.Iterator iter = IRegistry.ENTITY_TYPE.iterator();
#else
        java.util.Iterator iter = EntityTypes.REGISTRY.iterator();
#endif
        while (iter.hasNext()) {
            EntityTypes type = (EntityTypes) iter.next();
            if (type.c() == entityType) {
                return type;
            }
        }
        return null;
    }
#else
    public optional (Class<?>) Class<? extends Entity> getEntityClassInst:###();

    public static optional (EntityTypesHandle) EntityTypes fromEntityClass:###(Class<?> entityType);
#endif

#if version >= 1.13
    public static Class<?> getEntityClass(String internalEntityName) {
        EntityTypes type = EntityTypes.a(internalEntityName);
        if (type == null) {
            return null;
        } else {
            return type.c();
        }
    }

    public static String getEntityInternalName(Class<?> entityType) {
#if version >= 1.13.1
        java.util.Iterator iter = IRegistry.ENTITY_TYPE.iterator();
#else
        java.util.Iterator iter = EntityTypes.REGISTRY.iterator();
#endif
        while (iter.hasNext()) {
            EntityTypes type = (EntityTypes) iter.next();
            if (type.c() == entityType) {
                MinecraftKey key = EntityTypes.getName(type);
                if (key != null) {
                    return key.getKey();
                }
            }
        }
        return null;
    }

    public static int getEntityTypeId(Class<?> entityType) {
#if version >= 1.13.1
        java.util.Iterator iter = IRegistry.ENTITY_TYPE.iterator();
#else
        java.util.Iterator iter = EntityTypes.REGISTRY.iterator();
#endif
        while (iter.hasNext()) {
            EntityTypes type = (EntityTypes) iter.next();
            if (type.c() == entityType) {
#if version >= 1.13.1
                return IRegistry.ENTITY_TYPE.a((Object) type);
#else
                return EntityTypes.REGISTRY.a((Object) type);
#endif
            }
        }
        return -1;
    }
#elseif version >= 1.11
    public static Class<?> getEntityClass(String internalEntityName) {
        return EntityTypes.b.get(new MinecraftKey(internalEntityName));
    }

    public static String getEntityInternalName(Class<?> entityType) {
        MinecraftKey key = EntityTypes.getName(entityType);
        if (key == null) {
            return null;
        } else {
            return EntityTypes.a(key);
        }
    }

    public static int getEntityTypeId(Class<?> entityType) {
        return EntityTypes.b.a((Object) entityType);
    }
#elseif version >= 1.9
    public static Class<?> getEntityClass(String internalEntityName) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_nameTypeMap_1_10_2.get();
        return (Class) map.get(internalEntityName);
    }

    public static String getEntityInternalName(Class<?> entityType) {
        return EntityTypes.getName(entityType);
    }

    public static int getEntityTypeId(Class<?> entityType) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_typeIdMap_1_8.get();
        Integer id = (Integer) map.get(entityType);
        if (id != null) {
            return id.intValue();
        } else {
            return -1;
        }
    }
#else
    public static Class<?> getEntityClass(String internalEntityName) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_nameTypeMap_1_10_2.get();
        return (Class) map.get(internalEntityName);
    }

    public static String getEntityInternalName(Class<?> entityType) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_typeNameMap_1_10_2.get();
        return (String) map.get(entityType);
    }

    public static int getEntityTypeId(Class<?> entityType) {
        java.util.Map map = com.bergerkiller.generated.net.minecraft.server.EntityTypesHandle.T.opt_typeIdMap_1_8.get();
        Integer id = (Integer) map.get(entityType);
        if (id != null) {
            return id.intValue();
        } else {
            return -1;
        }
    }
#endif

}

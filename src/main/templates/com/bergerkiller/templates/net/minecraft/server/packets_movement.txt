package net.minecraft.server;

import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutEntityTeleportHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutEntityHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutEntityHandle.PacketPlayOutRelEntityMoveHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutEntityHandle.PacketPlayOutRelEntityMoveLookHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutEntityHandle.PacketPlayOutEntityLookHandle;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutEntityVelocityHandle

// Only >= MC 1.9
optional class PacketPlayInVehicleMove extends Packet {
    private double posX:a;
    private double posY:b;
    private double posZ:c;
    private float yaw:d;
    private float pitch:e;
}

// Only >= MC 1.9
optional class PacketPlayOutVehicleMove extends Packet {
    private double posX:a;
    private double posY:b;
    private double posZ:c;
    private float yaw:d;
    private float pitch:e;
}

class PacketPlayOutEntityTeleport extends Packet {
    private int entityId:a;
#if version >= 1.9
    private optional int posX_1_8_8:###;
    private optional int posY_1_8_8:###;
    private optional int posZ_1_8_8:###;
    private optional double posX_1_10_2:b;
    private optional double posY_1_10_2:c;
    private optional double posZ_1_10_2:d;
#else
    private optional int posX_1_8_8:b;
    private optional int posY_1_8_8:c;
    private optional int posZ_1_8_8:d;
    private optional double posX_1_10_2:###;
    private optional double posY_1_10_2:###;
    private optional double posZ_1_10_2:###;
#endif
    private optional byte yaw_raw:e;
    private optional byte pitch_raw:f;
    private boolean onGround:g;

    public (PacketPlayOutEntityTeleportHandle) PacketPlayOutEntityTeleport();

    public (PacketPlayOutEntityTeleportHandle) PacketPlayOutEntityTeleport((org.bukkit.entity.Entity) Entity entity);

    <code>
    @Override
    public com.bergerkiller.bukkit.common.protocol.PacketType getPacketType() {
        return com.bergerkiller.bukkit.common.protocol.PacketType.OUT_ENTITY_TELEPORT;
    }

    public static PacketPlayOutEntityTeleportHandle createNew(int entityId, double posX, double posY, double posZ, float yaw, float pitch, boolean onGround) {
        PacketPlayOutEntityTeleportHandle handle = createNew();
        handle.setEntityId(entityId);
        handle.setPosX(posX);
        handle.setPosY(posY);
        handle.setPosZ(posZ);
        handle.setYaw(yaw);
        handle.setPitch(pitch);
        handle.setOnGround(onGround);
        return handle;
    }

    public double getPosX() {
        return getProtocolPosition(T.posX_1_8_8, T.posX_1_10_2);
    }

    public double getPosY() {
        return getProtocolPosition(T.posY_1_8_8, T.posY_1_10_2);
    }

    public double getPosZ() {
        return getProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2);
    }

    public void setPosX(double posX) {
        setProtocolPosition(T.posX_1_8_8, T.posX_1_10_2, posX);
    }

    public void setPosY(double posY) {
        setProtocolPosition(T.posY_1_8_8, T.posY_1_10_2, posY);
    }

    public void setPosZ(double posZ) {
        setProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2, posZ);
    }

    public float getYaw() {
        return getProtocolRotation(T.yaw_raw);
    }

    public float getPitch() {
        return getProtocolRotation(T.pitch_raw);
    }

    public void setYaw(float yaw) {
        setProtocolRotation(T.yaw_raw, yaw);
    }

    public void setPitch(float pitch) {
        setProtocolRotation(T.pitch_raw, pitch);
    }
    </code>
}

// Only >= MC 1.9
optional class PacketPlayInBoatMove {
    private boolean rightPaddle:a;
    private boolean leftPaddle:b;
}

class PacketPlayOutEntityVelocity extends Packet {
    private int entityId:a;
    private int motX_raw:b;
    private int motY_raw:c;
    private int motZ_raw:d;

    public (PacketPlayOutEntityVelocityHandle) PacketPlayOutEntityVelocity(int entityId, double motX, double motY, double motZ);
    public (PacketPlayOutEntityVelocityHandle) PacketPlayOutEntityVelocity((org.bukkit.entity.Entity) Entity entity);

    <code>
    @Override
    public com.bergerkiller.bukkit.common.protocol.PacketType getPacketType() {
        return com.bergerkiller.bukkit.common.protocol.PacketType.OUT_ENTITY_VELOCITY;
    }

    public double getMotX() {
        return deserializeVelocity(T.motX_raw.getInteger(getRaw()));
    }

    public double getMotY() {
        return deserializeVelocity(T.motY_raw.getInteger(getRaw()));
    }

    public double getMotZ() {
        return deserializeVelocity(T.motZ_raw.getInteger(getRaw()));
    }

    public void setMotX(double motX) {
        T.motX_raw.setInteger(getRaw(), serializeVelocity(motX));
    }

    public void setMotY(double motY) {
        T.motY_raw.setInteger(getRaw(), serializeVelocity(motY));
    }

    public void setMotZ(double motZ) {
        T.motZ_raw.setInteger(getRaw(), serializeVelocity(motZ));
    }
    </code>
}

class PacketPlayOutEntity extends Packet {
    protected int entityId:a;
#if version >= 1.9
    protected optional byte dx_1_8_8:###;
    protected optional byte dy_1_8_8:###;
    protected optional byte dz_1_8_8:###;
    protected optional int dx_1_10_2:b;
    protected optional int dy_1_10_2:c;
    protected optional int dz_1_10_2:d;
#else
    protected optional byte dx_1_8_8:b;
    protected optional byte dy_1_8_8:c;
    protected optional byte dz_1_8_8:d;
    protected optional int dx_1_10_2:###;
    protected optional int dy_1_10_2:###;
    protected optional int dz_1_10_2:###;
#endif
    protected optional byte dyaw_raw:e;
    protected optional byte dpitch_raw:f;
    protected boolean onGround:g;
    protected unknown boolean hasMovement:h;

    // A whole bunch of accessor functions that help translating the protocol / actual values
    <code>
    public double getDeltaX() {
        return getProtocolPosition(T.dx_1_8_8, T.dx_1_10_2);
    }

    public double getDeltaY() {
        return getProtocolPosition(T.dy_1_8_8, T.dy_1_10_2);
    }

    public double getDeltaZ() {
        return getProtocolPosition(T.dz_1_8_8, T.dz_1_10_2);
    }

    public void setDeltaX(double dx) {
        setProtocolPosition(T.dx_1_8_8, T.dx_1_10_2, dx);
    }

    public void setDeltaY(double dy) {
        setProtocolPosition(T.dy_1_8_8, T.dy_1_10_2, dy);
    }

    public void setDeltaZ(double dz) {
        setProtocolPosition(T.dz_1_8_8, T.dz_1_10_2, dz);
    }

    public float getDeltaYaw() {
        return deserializeRotation(T.dyaw_raw.getByte(getRaw()));
    }

    public float getDeltaPitch() {
        return deserializeRotation(T.dpitch_raw.getByte(getRaw()));
    }

    public void setDeltaYaw(float deltaYaw) {
        T.dyaw_raw.setByte(getRaw(), (byte) serializeRotation(deltaYaw));
    }

    public void setDeltaPitch(float deltaPitch) {
        T.dpitch_raw.setByte(getRaw(), (byte) serializeRotation(deltaPitch));
    }
    </code>

    class PacketPlayOutEntity.PacketPlayOutEntityLook extends PacketPlayOutEntity {
        public (PacketPlayOutEntityHandle.PacketPlayOutEntityLookHandle) PacketPlayOutEntity.PacketPlayOutEntityLook();

        <code>
        @Override
        public com.bergerkiller.bukkit.common.protocol.PacketType getPacketType() {
            return com.bergerkiller.bukkit.common.protocol.PacketType.OUT_ENTITY_LOOK;
        }

        public static PacketPlayOutEntityHandle.PacketPlayOutEntityLookHandle createNew(int entityId, float deltaYaw, float deltaPitch, boolean onGround) {
            PacketPlayOutEntityHandle.PacketPlayOutEntityLookHandle handle = createNew();
            handle.setEntityId(entityId);
            handle.setDeltaYaw(deltaYaw);
            handle.setDeltaPitch(deltaPitch);
            handle.setOnGround(onGround);
            return handle;
        }
        </code>
    }

    class PacketPlayOutEntity.PacketPlayOutRelEntityMove extends PacketPlayOutEntity {
        public (PacketPlayOutEntityHandle.PacketPlayOutRelEntityMoveHandle) PacketPlayOutEntity.PacketPlayOutRelEntityMove();

        <code>
        @Override
        public com.bergerkiller.bukkit.common.protocol.PacketType getPacketType() {
            return com.bergerkiller.bukkit.common.protocol.PacketType.OUT_ENTITY_MOVE;
        }

        public static PacketPlayOutEntityHandle.PacketPlayOutRelEntityMoveHandle createNew(int entityId, double dx, double dy, double dz, boolean onGround) {
            PacketPlayOutEntityHandle.PacketPlayOutRelEntityMoveHandle handle = createNew();
            handle.setEntityId(entityId);
            handle.setDeltaX(dx);
            handle.setDeltaY(dy);
            handle.setDeltaZ(dz);
            handle.setOnGround(onGround);
            return handle;
        }
        </code>
    }

    class PacketPlayOutEntity.PacketPlayOutRelEntityMoveLook extends PacketPlayOutEntity {
        public (PacketPlayOutEntityHandle.PacketPlayOutRelEntityMoveLookHandle) PacketPlayOutEntity.PacketPlayOutRelEntityMoveLook();

        <code>
        @Override
        public com.bergerkiller.bukkit.common.protocol.PacketType getPacketType() {
            return com.bergerkiller.bukkit.common.protocol.PacketType.OUT_ENTITY_MOVE_LOOK;
        }

        public static PacketPlayOutEntityHandle.PacketPlayOutRelEntityMoveLookHandle createNew(int entityId, double dx, double dy, double dz, float deltaYaw, float deltaPitch, boolean onGround) {
            PacketPlayOutEntityHandle.PacketPlayOutRelEntityMoveLookHandle handle = createNew();
            handle.setEntityId(entityId);
            handle.setDeltaX(dx);
            handle.setDeltaY(dy);
            handle.setDeltaZ(dz);
            handle.setDeltaYaw(deltaYaw);
            handle.setDeltaPitch(deltaPitch);
            handle.setOnGround(onGround);
            return handle;
        }
        </code>
    }
}

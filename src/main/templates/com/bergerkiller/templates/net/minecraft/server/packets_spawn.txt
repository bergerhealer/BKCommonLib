package net.minecraft.server;

import org.bukkit.block.BlockFace;
import com.bergerkiller.bukkit.common.bases.IntVector3;
import com.bergerkiller.generated.net.minecraft.server.PacketPlayOutSpawnEntityLivingHandle;

class PacketPlayOutSpawnEntity extends Packet {
#if version >= 1.9
    private int entityId:a;
    private optional UUID entityUUID:b;
    private optional int posX_1_8_8:###;
    private optional int posY_1_8_8:###;
    private optional int posZ_1_8_8:###;
    private optional double posX_1_10_2:c;
    private optional double posY_1_10_2:d;
    private optional double posZ_1_10_2:e;
    private optional int motX_raw:f;
    private optional int motY_raw:g;
    private optional int motZ_raw:h;
    private optional int pitch_raw:i;
    private optional int yaw_raw:j;
    private int entityTypeId:k;
    private int extraData:l;
#else
    private int entityId:a;
    private optional UUID entityUUID:###;
    private optional int posX_1_8_8:b;
    private optional int posY_1_8_8:c;
    private optional int posZ_1_8_8:d;
    private optional double posX_1_10_2:###;
    private optional double posY_1_10_2:###;
    private optional double posZ_1_10_2:###;
    private optional int motX_raw:e;
    private optional int motY_raw:f;
    private optional int motZ_raw:g;
    private optional int pitch_raw:h;
    private optional int yaw_raw:i;
    private int entityTypeId:j;
    private int extraData:k;
#endif

    <code>
    @Override
    public com.bergerkiller.bukkit.common.protocol.PacketType getPacketType() {
        return com.bergerkiller.bukkit.common.protocol.PacketType.OUT_ENTITY_SPAWN;
    }

    public void setEntityUUID(UUID uuid) {
        if (T.entityUUID.isAvailable()) {
            T.entityUUID.set(getRaw(), uuid);
        }
    }

    public void setEntityType(org.bukkit.entity.EntityType type) {
        com.bergerkiller.bukkit.common.entity.CommonEntityType commonEntityType;
        commonEntityType = com.bergerkiller.bukkit.common.entity.CommonEntityType.byEntityType(type);
        if (commonEntityType.objectTypeId != -1) {
            setEntityTypeId(commonEntityType.objectTypeId);
        }
        if (commonEntityType.objectExtraData != -1) {
            setExtraData(commonEntityType.objectExtraData);
        }
    }

    public void setFallingBlockData(com.bergerkiller.bukkit.common.wrappers.BlockData blockData) {
        setExtraData(blockData.getCombinedId());
    }

    public double getPosX() {
        return getProtocolPosition(T.posX_1_8_8, T.posX_1_10_2);
    }

    public double getPosY() {
        return getProtocolPosition(T.posY_1_8_8, T.posY_1_10_2);
    }

    public double getPosZ() {
        return getProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2);
    }

    public void setPosX(double posX) {
        setProtocolPosition(T.posX_1_8_8, T.posX_1_10_2, posX);
    }

    public void setPosY(double posY) {
        setProtocolPosition(T.posY_1_8_8, T.posY_1_10_2, posY);
    }

    public void setPosZ(double posZ) {
        setProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2, posZ);
    }

    public double getMotX() {
        return deserializeVelocity(T.motX_raw.getInteger(getRaw()));
    }

    public double getMotY() {
        return deserializeVelocity(T.motY_raw.getInteger(getRaw()));
    }

    public double getMotZ() {
        return deserializeVelocity(T.motZ_raw.getInteger(getRaw()));
    }

    public void setMotX(double motX) {
        T.motX_raw.setInteger(getRaw(), serializeVelocity(motX));
    }

    public void setMotY(double motY) {
        T.motY_raw.setInteger(getRaw(), serializeVelocity(motY));
    }

    public void setMotZ(double motZ) {
        T.motZ_raw.setInteger(getRaw(), serializeVelocity(motZ));
    }

    public float getYaw() {
        return deserializeRotation(T.yaw_raw.getInteger(getRaw()));
    }

    public float getPitch() {
        return deserializeRotation(T.pitch_raw.getInteger(getRaw()));
    }

    public void setYaw(float yaw) {
        T.yaw_raw.setInteger(getRaw(), serializeRotation(yaw));
    }

    public void setPitch(float pitch) {
        T.pitch_raw.setInteger(getRaw(), serializeRotation(pitch));
    }
    </code>
}

class PacketPlayOutNamedEntitySpawn extends Packet {
    private int entityId:a;
    private UUID entityUUID:b;
#if version >= 1.9
    private optional int posX_1_8_8:###;
    private optional int posY_1_8_8:###;
    private optional int posZ_1_8_8:###;
    private optional double posX_1_10_2:c;
    private optional double posY_1_10_2:d;
    private optional double posZ_1_10_2:e;
#else
    private optional int posX_1_8_8:c;
    private optional int posY_1_8_8:d;
    private optional int posZ_1_8_8:e;
    private optional double posX_1_10_2:###;
    private optional double posY_1_10_2:###;
    private optional double posZ_1_10_2:###;
#endif
    private optional byte yaw_raw:f;
    private optional byte pitch_raw:g;

#if version >= 1.9
    private optional (org.bukkit.Material) int heldItem:###;
    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher) DataWatcher dataWatcher:h;
    private (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.Item<?>> dataWatcherItems:i;
#else
    private optional (org.bukkit.Material) int heldItem:h;
    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher) DataWatcher dataWatcher:i;
    private (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.WatchableObject> dataWatcherItems:j;
#endif

    <code>
    @Override
    public com.bergerkiller.bukkit.common.protocol.PacketType getPacketType() {
        return com.bergerkiller.bukkit.common.protocol.PacketType.OUT_ENTITY_SPAWN_NAMED;
    }

    public double getPosX() {
        return getProtocolPosition(T.posX_1_8_8, T.posX_1_10_2);
    }

    public double getPosY() {
        return getProtocolPosition(T.posY_1_8_8, T.posY_1_10_2);
    }

    public double getPosZ() {
        return getProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2);
    }

    public void setPosX(double posX) {
        setProtocolPosition(T.posX_1_8_8, T.posX_1_10_2, posX);
    }

    public void setPosY(double posY) {
        setProtocolPosition(T.posY_1_8_8, T.posY_1_10_2, posY);
    }

    public void setPosZ(double posZ) {
        setProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2, posZ);
    }

    public float getYaw() {
        return getProtocolRotation(T.yaw_raw);
    }

    public float getPitch() {
        return getProtocolRotation(T.pitch_raw);
    }

    public void setYaw(float yaw) {
        setProtocolRotation(T.yaw_raw, yaw);
    }

    public void setPitch(float pitch) {
        setProtocolRotation(T.pitch_raw, pitch);
    }

    public void setHeldItem(Material type) {
        if (T.heldItem.isAvailable()) {
            T.heldItem.set(getRaw(), type);
        }
    }

    public org.bukkit.Material getHeldItem() {
        if (T.heldItem.isAvailable()) {
            return T.heldItem.get(getRaw());
        } else {
            return org.bukkit.Material.AIR;
        }
    }
    </code>
}

class PacketPlayOutSpawnEntityLiving extends Packet {
    private int entityId:a;

#if version >= 1.9
    private optional UUID entityUUID:b;
    private int entityTypeId:c;
    private optional int posX_1_8_8:###;
    private optional int posY_1_8_8:###;
    private optional int posZ_1_8_8:###;
    private optional double posX_1_10_2:d;
    private optional double posY_1_10_2:e;
    private optional double posZ_1_10_2:f;
    private optional int motX_raw:g;
    private optional int motY_raw:h;
    private optional int motZ_raw:i;
    private optional byte yaw_raw:j;
    private optional byte pitch_raw:k;
    private optional byte headYaw_raw:l;
    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher) DataWatcher dataWatcher:m;
    private (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.Item<?>> dataWatcherItems:n;
#else
    private optional UUID entityUUID:###;
    private int entityTypeId:b;
    private optional int posX_1_8_8:c;
    private optional int posY_1_8_8:d;
    private optional int posZ_1_8_8:e;
    private optional double posX_1_10_2:###;
    private optional double posY_1_10_2:###;
    private optional double posZ_1_10_2:###;
    private optional int motX_raw:f;
    private optional int motY_raw:g;
    private optional int motZ_raw:h;
    private optional byte yaw_raw:i;
    private optional byte pitch_raw:j;
    private optional byte headYaw_raw:k;
    private (com.bergerkiller.bukkit.common.wrappers.DataWatcher) DataWatcher dataWatcher:l;
    private (List<com.bergerkiller.bukkit.common.wrappers.DataWatcher.Item<?>>) List<DataWatcher.WatchableObject> dataWatcherItems:m;
#endif

    public (PacketPlayOutSpawnEntityLivingHandle) PacketPlayOutSpawnEntityLiving();

    public (PacketPlayOutSpawnEntityLivingHandle) PacketPlayOutSpawnEntityLiving((org.bukkit.entity.LivingEntity) EntityLiving entity);

    <code>
    @Override
    public com.bergerkiller.bukkit.common.protocol.PacketType getPacketType() {
        return com.bergerkiller.bukkit.common.protocol.PacketType.OUT_ENTITY_SPAWN_LIVING;
    }

    public void setEntityUUID(UUID uuid) {
        if (T.entityUUID.isAvailable()) {
            T.entityUUID.set(getRaw(), uuid);
        }
    }

    public void setEntityType(org.bukkit.entity.EntityType type) {
        setEntityTypeId(com.bergerkiller.bukkit.common.entity.CommonEntityType.byEntityType(type).entityTypeId);
    }

    public double getPosX() {
        return getProtocolPosition(T.posX_1_8_8, T.posX_1_10_2);
    }

    public double getPosY() {
        return getProtocolPosition(T.posY_1_8_8, T.posY_1_10_2);
    }

    public double getPosZ() {
        return getProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2);
    }

    public void setPosX(double posX) {
        setProtocolPosition(T.posX_1_8_8, T.posX_1_10_2, posX);
    }

    public void setPosY(double posY) {
        setProtocolPosition(T.posY_1_8_8, T.posY_1_10_2, posY);
    }

    public void setPosZ(double posZ) {
        setProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2, posZ);
    }

    public double getMotX() {
        return deserializeVelocity(T.motX_raw.getInteger(getRaw()));
    }

    public double getMotY() {
        return deserializeVelocity(T.motY_raw.getInteger(getRaw()));
    }

    public double getMotZ() {
        return deserializeVelocity(T.motZ_raw.getInteger(getRaw()));
    }

    public void setMotX(double motX) {
        T.motX_raw.setInteger(getRaw(), serializeVelocity(motX));
    }

    public void setMotY(double motY) {
        T.motY_raw.setInteger(getRaw(), serializeVelocity(motY));
    }

    public void setMotZ(double motZ) {
        T.motZ_raw.setInteger(getRaw(), serializeVelocity(motZ));
    }

    public float getYaw() {
        return getProtocolRotation(T.yaw_raw);
    }

    public float getPitch() {
        return getProtocolRotation(T.pitch_raw);
    }

    public float getHeadYaw() {
        return getProtocolRotation(T.headYaw_raw);
    }

    public void setYaw(float yaw) {
        setProtocolRotation(T.yaw_raw, yaw);
    }

    public void setPitch(float pitch) {
        setProtocolRotation(T.pitch_raw, pitch);
    }

    public void setHeadYaw(float headYaw) {
        setProtocolRotation(T.headYaw_raw, headYaw);
    }
    </code>
}

class PacketPlayOutSpawnEntityExperienceOrb extends Packet {
    private int entityId:a;
#if version >= 1.9
    private optional int posX_1_8_8:###;
    private optional int posY_1_8_8:###;
    private optional int posZ_1_8_8:###;
    private optional double posX_1_10_2:b;
    private optional double posY_1_10_2:c;
    private optional double posZ_1_10_2:d;
#else
    private optional int posX_1_8_8:b;
    private optional int posY_1_8_8:c;
    private optional int posZ_1_8_8:d;
    private optional double posX_1_10_2:###;
    private optional double posY_1_10_2:###;
    private optional double posZ_1_10_2:###;
#endif
    private int experience:e;

    <code>
    public double getPosX() {
        return getProtocolPosition(T.posX_1_8_8, T.posX_1_10_2);
    }

    public double getPosY() {
        return getProtocolPosition(T.posY_1_8_8, T.posY_1_10_2);
    }

    public double getPosZ() {
        return getProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2);
    }

    public void setPosX(double posX) {
        setProtocolPosition(T.posX_1_8_8, T.posX_1_10_2, posX);
    }

    public void setPosY(double posY) {
        setProtocolPosition(T.posY_1_8_8, T.posY_1_10_2, posY);
    }

    public void setPosZ(double posZ) {
        setProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2, posZ);
    }
    </code>
}

class PacketPlayOutSpawnEntityPainting extends Packet {
    private int entityId:a;

#if version >= 1.13
    private optional UUID entityUUID:entityUUID:b;
    private (IntVector3) BlockPosition position:c;
    private (BlockFace) EnumDirection facing:d;
    private (org.bukkit.Art) int art:e;
#elseif version >= 1.9
    private optional UUID entityUUID:entityUUID:b;
    private (IntVector3) BlockPosition position:c;
    private (BlockFace) EnumDirection facing:d;
    private (org.bukkit.Art) String art:e;
#else
    private optional UUID entityUUID:entityUUID:###;
    private (IntVector3) BlockPosition position:b;
    private (BlockFace) EnumDirection facing:c;
    private (org.bukkit.Art) String art:d;
#endif

    <code>
    public void setEntityUUID(UUID uuid) {
        if (T.entityUUID.isAvailable()) {
            T.entityUUID.set(getRaw(), uuid);
        }
    }
    </code>
}

class PacketPlayOutSpawnEntityWeather extends Packet {
    private int entityId:a;

#if version >= 1.9
    private optional int posX_1_8_8:###;
    private optional int posY_1_8_8:###;
    private optional int posZ_1_8_8:###;
    private optional double posX_1_10_2:b;
    private optional double posY_1_10_2:c;
    private optional double posZ_1_10_2:d;
#else
    private optional int posX_1_8_8:b;
    private optional int posY_1_8_8:c;
    private optional int posZ_1_8_8:d;
    private optional double posX_1_10_2:###;
    private optional double posY_1_10_2:###;
    private optional double posZ_1_10_2:###;
#endif

    private int type:e;

    <code>
    public double getPosX() {
        return getProtocolPosition(T.posX_1_8_8, T.posX_1_10_2);
    }

    public double getPosY() {
        return getProtocolPosition(T.posY_1_8_8, T.posY_1_10_2);
    }

    public double getPosZ() {
        return getProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2);
    }

    public void setPosX(double posX) {
        setProtocolPosition(T.posX_1_8_8, T.posX_1_10_2, posX);
    }

    public void setPosY(double posY) {
        setProtocolPosition(T.posY_1_8_8, T.posY_1_10_2, posY);
    }

    public void setPosZ(double posZ) {
        setProtocolPosition(T.posZ_1_8_8, T.posZ_1_10_2, posZ);
    }
    </code>
}
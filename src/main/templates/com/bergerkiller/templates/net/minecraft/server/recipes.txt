package net.minecraft.server;

import com.bergerkiller.bukkit.common.inventory.CraftInputSlot;

import com.bergerkiller.generated.net.minecraft.server.RegistryMaterialsHandle;
import com.bergerkiller.generated.net.minecraft.server.CraftingManagerHandle;
import com.bergerkiller.generated.net.minecraft.server.RecipesFurnaceHandle;
import com.bergerkiller.generated.net.minecraft.server.IRecipeHandle;
import com.bergerkiller.generated.net.minecraft.server.ItemStackHandle;

#if version >= 1.12

class IRecipe {
#if version >= 1.13
    public abstract (org.bukkit.inventory.ItemStack) ItemStack getOutput:d();
#else
    public abstract (org.bukkit.inventory.ItemStack) ItemStack getOutput:b();
#endif
}

class ShapedRecipes extends IRecipe {
    private final (List<CraftInputSlot>) NonNullList<RecipeItemStack> inputItems:items;
}

class ShapelessRecipes extends IRecipe {
    private final (List<CraftInputSlot>) NonNullList<RecipeItemStack> inputItems:ingredients;
}

#else

interface IRecipe {
    public abstract (org.bukkit.inventory.ItemStack) ItemStack getOutput:b();
}

class ShapedRecipes extends IRecipe {
    private final (List<CraftInputSlot>) ItemStack[] inputItems:items;
}

class ShapelessRecipes extends IRecipe {
    private final (List<CraftInputSlot>) List<ItemStack> inputItems:ingredients;
}

#endif

// >= MC 1.12
optional class RecipeItemStack {
    public final optional (List<org.bukkit.inventory.ItemStack>) ItemStack[] choices;

    public (List<org.bukkit.inventory.ItemStack>) ItemStack[] getChoices() {
#if version >= 1.13
        instance.buildChoices();
#endif
        return instance.choices;
    }

    <code>
    public static Object createRawRecipeItemStack(List<org.bukkit.inventory.ItemStack> choices) {
        Object raw = T.newInstanceNull();
        T.choices.set(raw, choices);
        return raw;
    }
    </code>
}

// <= MC 1.12.2
optional class RecipesFurnace {
    public (Map<org.bukkit.inventory.ItemStack, org.bukkit.inventory.ItemStack>) Map<ItemStack, ItemStack> recipes;

    public static (RecipesFurnaceHandle) RecipesFurnace getInstance();

    public (ItemStackHandle) ItemStack getResult((ItemStackHandle) ItemStack itemstack);

}

// >= MC 1.13
optional class FurnaceRecipe extends IRecipe {
    private final (CraftInputSlot) RecipeItemStack ingredient;

    public static (Iterable<com.bergerkiller.generated.net.minecraft.server.FurnaceRecipeHandle>) Iterable<FurnaceRecipe> getRecipes() {
        java.util.Iterator allRecipes = MinecraftServer.getServer().getCraftingManager().b().iterator();
        java.util.List filteredResult = new java.util.ArrayList();
        while (allRecipes.hasNext()) {
            Object recipe = allRecipes.next();
            if (recipe instanceof FurnaceRecipe) {
                filteredResult.add(recipe);
            }
        }
        return filteredResult;
    }
}

class CraftingManager {
    public static (Iterable<com.bergerkiller.generated.net.minecraft.server.IRecipeHandle>) Iterable<IRecipe> getRecipes() {
#if version >= 1.13
        java.util.Iterator allRecipes = MinecraftServer.getServer().getCraftingManager().b().iterator();
        java.util.List filteredResult = new java.util.ArrayList();
        while (allRecipes.hasNext()) {
            Object recipe = allRecipes.next();
            if (recipe instanceof FurnaceRecipe) {
                continue;
            }
            filteredResult.add(recipe);
        }
        return filteredResult;
#elseif version >= 1.12
        return CraftingManager.recipes;
#else
        return CraftingManager.getInstance().recipes;
#endif
    }
}

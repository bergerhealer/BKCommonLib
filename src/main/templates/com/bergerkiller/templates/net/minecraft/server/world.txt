package net.minecraft.server;

import com.bergerkiller.bukkit.common.wrappers.BlockData;
import com.bergerkiller.bukkit.common.wrappers.Dimension;
import com.bergerkiller.bukkit.common.bases.IntVector3;

import com.bergerkiller.generated.net.minecraft.server.IDataManagerHandle;
import com.bergerkiller.generated.net.minecraft.server.AxisAlignedBBHandle;
import com.bergerkiller.generated.net.minecraft.server.ChunkHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldServerHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldDataHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldTypeHandle;
import com.bergerkiller.generated.net.minecraft.server.PlayerChunkMapHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityPlayerHandle;
import com.bergerkiller.generated.net.minecraft.server.EntityHumanHandle;
import com.bergerkiller.generated.net.minecraft.server.MethodProfilerHandle;
import com.bergerkiller.generated.net.minecraft.server.BiomeBaseHandle.BiomeMetaHandle;
import com.bergerkiller.generated.net.minecraft.server.WorldProviderHandle;
import com.bergerkiller.generated.net.minecraft.server.TileEntityHandle;
import com.bergerkiller.generated.net.minecraft.server.ChunkProviderServerHandle;
import com.bergerkiller.generated.net.minecraft.server.BiomeBaseHandle.BiomeMetaHandle;
import com.bergerkiller.generated.net.minecraft.server.MovingObjectPositionHandle;
import com.bergerkiller.generated.net.minecraft.server.RegionFileHandle;
import com.bergerkiller.generated.net.minecraft.server.IWorldAccessHandle;
import com.bergerkiller.generated.net.minecraft.server.MinecraftServerHandle;
import com.bergerkiller.generated.net.minecraft.server.VoxelShapeHandle;

class World extends IBlockAccess {
    /* protected final (IntHashMap<EntityHandle>) IntHashMap<Entity> entitiesById; */

#if classexists com.destroystokyo.paper.PaperWorldEntityList
    public final readonly (List<EntityHandle>) com.destroystokyo.paper.PaperWorldEntityList entityList;
#else
    public final readonly (List<EntityHandle>) List<Entity> entityList;
#endif

#if version >= 1.9

    #if paperspigot
        #if version >= 1.13
            protected final (Collection<EntityHandle>) Set<Entity> entityRemoveQueue:g;
        #else
            protected final (Collection<EntityHandle>) Set<Entity> entityRemoveQueue:f;
        #endif
    #else
        #if version >= 1.13
            protected final (Collection<EntityHandle>) List<Entity> entityRemoveQueue:g;
        #else
            protected final (Collection<EntityHandle>) List<Entity> entityRemoveQueue:f;
        #endif
    #endif

    public optional final (List<TileEntityHandle>) List<TileEntity> tileEntityList;
#else
    protected final (Collection<EntityHandle>) List<Entity> entityRemoveQueue:g;
    public optional final (List<TileEntityHandle>) List<TileEntity> tileEntityList:###;
#endif

    public final (List<EntityHumanHandle>) List<EntityHuman> players;
    public final Random random;
    public (WorldProviderHandle) WorldProvider worldProvider;

    // Only available >= MC 1.9
    protected optional (Object) NavigationListener navigationListener:t;

#if version >= 1.13
    protected (List<IWorldAccessHandle>) List<IWorldAccess> accessList:v;
#else
    protected (List<IWorldAccessHandle>) List<IWorldAccess> accessList:u;
#endif

    protected optional (Object) IChunkProvider field_chunkProvider:chunkProvider;
    public final (MethodProfilerHandle) MethodProfiler methodProfiler;

    private final (org.bukkit.World) org.bukkit.craftbukkit.CraftWorld bukkitWorld:world;
    public boolean keepSpawnInMemory;

    public (org.bukkit.World) org.bukkit.craftbukkit.CraftWorld getWorld();

    public (org.bukkit.Server) org.bukkit.craftbukkit.CraftServer getServer();

    public (BlockData) IBlockData getBlockData:getType((IntVector3) BlockPosition blockposition);

    /* This is runtime generated to improve performance, avoiding the cost of creating BlockPosition objects */
    public BlockData getBlockDataAtCoord(int x, int y, int z) {
        // CraftBukkit does some special stuff, sometimes, when captureTreeGeneration is set
        if (instance.captureTreeGeneration) {
            IBlockData blockData = instance.getType(new BlockPosition(x, y, z));
            return com.bergerkiller.bukkit.common.wrappers.BlockData.fromBlockData(blockData);
        }

        // Check within bounds of the chunk slices before performing any expensive calls
        if (y >= 0 && y < 256) {
            ChunkSection section = instance.getChunkAt(x >> 4, z >> 4).getSections()[y >> 4];
            if (section != null) {
                IBlockData blockData = section.getType(x & 0xF, y & 0xF, z & 0xF);
                return com.bergerkiller.bukkit.common.wrappers.BlockData.fromBlockData(blockData);
            }
        }

        // Fallback is AIR
        return com.bergerkiller.bukkit.common.wrappers.BlockData.AIR;
    }

    public boolean setBlockData:setTypeAndData((IntVector3) BlockPosition blockposition, (BlockData) IBlockData iblockdata, int updateFlags);

    public long getTime();

    public optional (Object) IChunkProvider getChunkProvider();

#if version >= 1.13
    public boolean isWithinWorldBorder:i((EntityHandle) Entity entity);
#elseif version >= 1.11.2
    public boolean isWithinWorldBorder:g((EntityHandle) Entity entity);
#elseif version >= 1.8.3
    public boolean isWithinWorldBorder((EntityHandle) Entity entity) {
        return instance.a(instance.getWorldBorder(), entity);
    }
#else
    public boolean isWithinWorldBorder((EntityHandle) Entity entity) {
        return instance.a(instance.af(), entity);
    }
#endif

#if version >= 1.13
    private optional boolean getBlockCollisions:###((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB bounds, boolean flag, (List<AxisAlignedBBHandle>) List<AxisAlignedBB> list);
#elseif version >= 1.11.2
    private optional boolean getBlockCollisions:a((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB bounds, boolean flag, (List<AxisAlignedBBHandle>) List<AxisAlignedBB> list);
#else
    private optional boolean getBlockCollisions:###((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB bounds, boolean flag, (List<AxisAlignedBBHandle>) List<AxisAlignedBB> list);
#endif

#if version >= 1.13.1
    public (java.util.stream.Stream<VoxelShapeHandle>) java.util.stream.Stream<VoxelShape> getCollisionShapes:a((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB boundingBox, double dx, double dy, double dz);
#elseif version >= 1.13
    public (java.util.stream.Stream<VoxelShapeHandle>) VoxelShape getCollisionShapes:a((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB boundingBox, double dx, double dy, double dz);
#elseif version >= 1.11
    public (java.util.stream.Stream<VoxelShapeHandle>) List<AxisAlignedBB> getCollisionShapes((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB boundingBox, double dx, double dy, double dz) {
        return instance.getCubes(entity, boundingBox.b(dx, dy, dz));
    }
#else
    public (java.util.stream.Stream<VoxelShapeHandle>) List<AxisAlignedBB> getCollisionShapes((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB boundingBox, double dx, double dy, double dz) {
        return instance.getCubes(entity, boundingBox.a(dx, dy, dz));
    }
#endif

#if version >= 1.13
    //TODO: MISSING!!!!
    public (List<AxisAlignedBBHandle>) List<AxisAlignedBB> getCubes((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb) {
        return new java.util.ArrayList();
    }
#else
    public (List<AxisAlignedBBHandle>) List<AxisAlignedBB> getCubes((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb);
#endif

    public (List<?>) List<T extends Entity> getRawEntitiesOfType:a((Class<?>) Class<? extends Entity> rawType, (AxisAlignedBBHandle) AxisAlignedBB bounds);

    public (List<EntityHandle>) List<Entity> getEntities((EntityHandle) Entity entity, (AxisAlignedBBHandle) AxisAlignedBB axisalignedbb);

    public (TileEntityHandle) TileEntity getTileEntity((IntVector3) BlockPosition blockposition);

    public (WorldDataHandle) WorldData getWorldData();

    // Used on MC 1.8.8 only!
#if version >= 1.9
    public optional void makeSound:###(double x, double y, double z, String name, float volume, float pitch);
#else
    public optional void makeSound(double x, double y, double z, String name, float volume, float pitch);
#endif

#if version >= 1.13
    public boolean isBurnArea:b((AxisAlignedBBHandle) AxisAlignedBB bounds);
#elseif version >= 1.11.2
    public boolean isBurnArea:e((AxisAlignedBBHandle) AxisAlignedBB bounds);
#elseif version >= 1.9
    public boolean isBurnArea:f((AxisAlignedBBHandle) AxisAlignedBB bounds);
#else
    public boolean isBurnArea:e((AxisAlignedBBHandle) AxisAlignedBB bounds);
#endif

    public void removeEntity((EntityHandle) Entity entity);

    public boolean addEntity((EntityHandle) Entity entity);

#if version >= 1.9
    public (org.bukkit.entity.Entity) Entity getEntityById:getEntity(int entityId);
#else
    public (org.bukkit.entity.Entity) Entity getEntityById:a(int entityId);
#endif

    public (IDataManagerHandle) IDataManager getDataManager();

    public float getExplosionFactor:a((org.bukkit.util.Vector) Vec3D vec3d, (AxisAlignedBBHandle) AxisAlignedBB bounds);

    // Note: moved to IWorldReader interface on MC 1.13
    public boolean areChunksLoaded((IntVector3) BlockPosition blockposition, int distance);

#if version >= 1.13
    // Fallback...
    public (MovingObjectPositionHandle) MovingObjectPosition rayTrace((org.bukkit.util.Vector) Vec3D point1, (org.bukkit.util.Vector) Vec3D point2, boolean flag) {
        return instance.rayTrace(point1, point2);
    }
#else
    public (MovingObjectPositionHandle) MovingObjectPosition rayTrace((org.bukkit.util.Vector) Vec3D point1, (org.bukkit.util.Vector) Vec3D point2, boolean flag);
#endif

    public (MovingObjectPositionHandle) MovingObjectPosition rayTrace2:rayTrace((org.bukkit.util.Vector) Vec3D point1, (org.bukkit.util.Vector) Vec3D point2);

    // >= 1.11 (has 'self' option)
    public optional void opt_applyPhysics:applyPhysics((IntVector3) BlockPosition position, (BlockData) Block causeType, boolean self);

    // <= 1.10.2 (lacks 'self' option)
    public optional void opt_applyPhysics_old:applyPhysics((IntVector3) BlockPosition position, (BlockData) Block causeType);

    <code>
    public void applyPhysics(IntVector3 position, BlockData causeType, boolean self) {
        if (T.opt_applyPhysics.isAvailable()) {
            T.opt_applyPhysics.invoke(getRaw(), position, causeType, self);
        } else if (T.opt_applyPhysics_old.isAvailable()) {
            T.opt_applyPhysics_old.invoke(getRaw(), position, causeType);
        } else {
            throw new UnsupportedOperationException("Apply physics function not available on this server");
        }
        // Update self
        if (self) {
            applyBlockPhysics(position, causeType);
        }
    }
    </code>

    public void applyBlockPhysics((IntVector3) BlockPosition position, (BlockData) Block causeType) {
#if version >= 1.11
        instance.a(position, causeType, position);
#elseif version >= 1.9
        instance.e(position, causeType);
#else
        instance.d(position, causeType);
#endif
    }

#if version >= 1.13
    public abstract boolean isChunkLoaded(int cx, int cz, boolean flag);
#else
    protected abstract boolean isChunkLoaded(int cx, int cz, boolean flag);
#endif

    <code>
    public org.bukkit.World toBukkit() {
        return com.bergerkiller.bukkit.common.conversion.Conversion.toWorld.convert(getRaw());
    }

    public static WorldHandle fromBukkit(org.bukkit.World world) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.Conversion.toWorldHandle.convert(world));
    }
    </code>
}

class WorldServer extends World {
    private final (MinecraftServerHandle) MinecraftServer minecraftServer:server;
    public (com.bergerkiller.bukkit.common.wrappers.EntityTracker) EntityTracker entityTracker:tracker;
    private final (PlayerChunkMapHandle) PlayerChunkMap playerChunkMapField:manager;
    private final (Map<java.util.UUID, EntityHandle>) Map<java.util.UUID, Entity> entitiesByUUID;

    public optional (ChunkProviderServerHandle) ChunkProviderServer field_chunkProviderServer:chunkProviderServer;

    public (PlayerChunkMapHandle) PlayerChunkMap getPlayerChunkMap();

    // Only available >= MC 1.9
    // For MC 1.8.8, we use field access
    public optional (ChunkProviderServerHandle) ChunkProviderServer getChunkProviderServer();

#if version >= 1.13
    public void saveLevel() {
        instance.getDataManager().a();
    }
#else
    public void saveLevel();
#endif

    <code>
    public static WorldServerHandle fromBukkit(org.bukkit.World world) {
        return createHandle(com.bergerkiller.bukkit.common.conversion.Conversion.toWorldHandle.convert(world));
    }

    public ChunkProviderServerHandle getChunkProviderServer() {
        if (T.getChunkProviderServer.isAvailable()) {
            return T.getChunkProviderServer.invoke(getRaw());
        } else if (WorldHandle.T.getChunkProvider.isAvailable()) {
            return ChunkProviderServerHandle.createHandle(WorldHandle.T.getChunkProvider.invoke(getRaw()));
        } else if (T.field_chunkProviderServer.isAvailable()) {
            return T.field_chunkProviderServer.get(getRaw());   
        } else {
            throw new UnsupportedOperationException("Chunk Provider Server can not be accessed for worlds on this server");
        }
    }

    public void setChunkProviderServer(ChunkProviderServerHandle chunkProviderServerHandle) {
        if (T.field_chunkProviderServer.isAvailable()) {
            T.field_chunkProviderServer.set(getRaw(), chunkProviderServerHandle);
        }
        if (WorldHandle.T.field_chunkProvider.isAvailable()) {
            WorldHandle.T.field_chunkProvider.set(getRaw(), chunkProviderServerHandle.getRaw());
        }
    }
    </code>
}

class ChunkProviderServer {
    private final (Object) IChunkLoader chunkLoader;
    public final (WorldServerHandle) WorldServer world;

#if version >= 1.9.4
    public (List<BiomeMetaHandle>) List<BiomeBase.BiomeMeta> getBiomeSpawnInfo:a((Object) EnumCreatureType enumcreaturetype, (IntVector3) BlockPosition position);

    public boolean isLoaded(int cx, int cz);
#elseif version >= 1.9
    public (List<BiomeMetaHandle>) List<BiomeBase.BiomeMeta> getBiomeSpawnInfo:a((Object) EnumCreatureType enumcreaturetype, (IntVector3) BlockPosition position);

    public boolean isLoaded:e(int cx, int cz);
#else
    public (List<BiomeMetaHandle>) List<BiomeBase.BiomeMeta> getBiomeSpawnInfo:getMobsFor((Object) EnumCreatureType enumcreaturetype, (IntVector3) BlockPosition position);

    public boolean isLoaded:isChunkLoaded(int cx, int cz);
#endif

#if version >= 1.13.1
    public (ChunkHandle) Chunk getChunkIfLoaded(int cx, int cz) {
        return instance.getChunkAt(cx, cz, false, false);
    }

    public (ChunkHandle) Chunk getChunkAt(int cx, int cz) {
        return instance.getChunkAt(cx, cz, true, true);
    }
#else
    public (ChunkHandle) Chunk getChunkIfLoaded(int cx, int cz);
    public (ChunkHandle) Chunk getChunkAt(int cx, int cz);
#endif

    // Removed (no longer supported?) since MC 1.13
    // There is an async method for generating, but it is not interesting at all.
#if version >= 1.13
    public (ChunkHandle) Chunk getChunkAtAsync(int cx, int cz, Runnable runnable) {
        Iterable iterable = java.util.Collections.singleton(new ChunkCoordIntPair(cx, cz));
        com.bergerkiller.bukkit.common.collections.RunnableConsumer consumer;
        consumer = com.bergerkiller.bukkit.common.collections.RunnableConsumer.create(runnable);
        instance.a(iterable, consumer);
        return (Chunk) consumer.getValue();
    }
#else
    public (ChunkHandle) Chunk getChunkAtAsync:getChunkAt(int cx, int cz, Runnable runnable);
#endif

    // unloaded parameter was added in a newer spigot build of 1.12.1 (CraftBukkit does not have that)
    public optional void saveChunk_old:saveChunk((ChunkHandle) Chunk chunk);

#if version >= 1.13
    public optional void saveChunk_new:saveChunk((ChunkHandle) IChunkAccess chunk, boolean unloaded);
#else
    public optional void saveChunk_new:saveChunk((ChunkHandle) Chunk chunk, boolean unloaded);
#endif

    <code>
    public void saveLoadedChunk(ChunkHandle chunk) {
        if (T.saveChunk_new.isAvailable()) {
            T.saveChunk_new.invoke(getRaw(), chunk, false);
        } else {
            T.saveChunk_old.invoke(getRaw(), chunk);
        }
    }
    </code>
}

class WorldData {
    public (WorldTypeHandle) WorldType getType();

    public void setClearTimer:i(int ticks);
}

class WorldType {
    private final String name;

#if version >= 1.13
    #if pre == 7
        public (Dimension) int getDimension:h();
    #else
        public (Dimension) int getDimension:i();
    #endif
#else
    public (Dimension) int getDimension:g();
#endif

    public static (WorldTypeHandle) WorldType getType(String name)
}

class WorldProvider {
#if version >= 1.13
    protected boolean isDarkWorldField:d;
#else
    protected boolean isDarkWorldField:e;
#endif

<code>
    public boolean hasSkyLight() {
        return !isDarkWorld();
    }

    public boolean isDarkWorld() {
        return isDarkWorldField();
    }
</code>
}

class WeightedRandom {

    class WeightedRandom.WeightedRandomChoice {
        protected int chance:a;
    }
}

class BiomeBase {

    class BiomeBase.BiomeMeta extends WeightedRandom.WeightedRandomChoice {
#if version >= 1.13
        public (java.lang.Class<?>) EntityTypes entityClass:b;
#else
        public (java.lang.Class<?>) java.lang.Class<? extends EntityInsentient> entityClass:b;
#endif
        public int minSpawnCount:c;
        public int maxSpawnCount:d;

#if version >= 1.13
        public (BiomeMetaHandle) BiomeBase.BiomeMeta((java.lang.Class<?>) EntityTypes entityClass, int x, int y, int z);
#else
        public (BiomeMetaHandle) BiomeBase.BiomeMeta((java.lang.Class<?>) java.lang.Class<? extends EntityInsentient> entityClass, int x, int y, int z);
#endif

    }

}

interface IWorldAccess {
    public abstract void onEntityAdded:a((EntityHandle) Entity entity);

    public abstract void onEntityRemoved:b((EntityHandle) Entity entity);
}

interface IBlockAccess {
}

interface IDataManager {

}

class WorldNBTStorage extends IDataManager {
    public java.io.File getPlayerDir();
}

class MovingObjectPosition {
    public (org.bukkit.block.BlockFace) EnumDirection direction;
    public (org.bukkit.util.Vector) Vec3D pos;
}

class RegionFile {
    private final java.io.File file:b;
    private java.io.RandomAccessFile stream:c;

    public (RegionFileHandle) RegionFile(java.io.File file);

    public void close:c();

#if version >= 1.13
    #if pre <= 7
        public boolean chunkExists:c(int cx, int cz);
    #else
        public boolean chunkExists:d(int cx, int cz);
    #endif
#else
    public boolean chunkExists:c(int cx, int cz);
#endif
}

class RegionFileCache {
    public static final (Map<java.io.File, RegionFileHandle>) Map<java.io.File, RegionFile> FILES:a;
}

class ChunkRegionLoader {
#if version >= 1.12
    public optional boolean opt_chunkExists:chunkExists(int cx, int cz);
#else
    public optional boolean opt_chunkExists:a(int cx, int cz);
#endif

    // <= 1.10.2
    public optional boolean opt_chunkExists_old:chunkExists((org.bukkit.World) World world, int cx, int cz);

<code>
    public boolean chunkExists(org.bukkit.World world, int cx, int cz) {
        if (T.opt_chunkExists_old.isAvailable()) {
            return T.opt_chunkExists_old.invoke(getRaw(), world, cx, cz);
        } else {
            return T.opt_chunkExists.invoke(getRaw(), cx, cz);
        }
    }
</code>
}